name: Build LaTeX PDF from README

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:

permissions:
  contents: write

jobs:
  build-doc:
    runs-on: ubuntu-latest
    timeout-minutes: 30  # Timeout despu√©s de 30 minutos

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r software/documentation/requirements.txt

    - name: Cache LaTeX packages
      uses: actions/cache@v4
      with:
        path: |
          /usr/share/texlive
          /usr/share/texmf
          /var/lib/texmf
        key: texlive-${{ runner.os }}-v2
        restore-keys: |
          texlive-${{ runner.os }}-

    - name: Install LaTeX and Ghostscript (optimized)
      run: |
        echo "üîÑ Iniciando instalaci√≥n de LaTeX..."
        start_time=$(date +%s)
        
        # Usar cache del sistema y optimizar instalaci√≥n
        sudo apt-get update -qq
        
        echo "üì¶ Instalando paquetes LaTeX esenciales..."
        # Instalar solo los paquetes esenciales para LaTeX
        sudo apt-get install -y --no-install-recommends \
          texlive-latex-base \
          texlive-latex-recommended \
          texlive-fonts-recommended \
          texlive-latex-extra \
          ghostscript \
          poppler-utils
        
        # Limpiar cache para reducir espacio
        sudo apt-get clean
        
        end_time=$(date +%s)
        elapsed=$((end_time - start_time))
        echo "‚úÖ LaTeX y Ghostscript instalados en ${elapsed}s"


      
    - name: Copy and rename hardware images for documentation
      run: |
        mkdir -p software/documentation/images

        # Buscar y copiar dimension
        file=$(ls hardware/resources/unit_dimension_*.png 2>/dev/null | head -n1)
        if [ -n "$file" ]; then cp "$file" software/documentation/images/dimension.png; else echo "dimension not found"; fi

        # Buscar y copiar pinout
        file=$(ls hardware/resources/unit_pinout_*.png 2>/dev/null | head -n1)
        if [ -n "$file" ]; then cp "$file" software/documentation/images/pinout.png; else echo "pinout not found"; fi

        # Buscar y copiar top
        file=$(ls hardware/resources/unit_top_*.png 2>/dev/null | head -n1)
        if [ -n "$file" ]; then cp "$file" software/documentation/images/top.png; else echo "top not found"; fi

    - name: Validate README content
      run: python test_readme.py
      working-directory: software/documentation

    - name: Generate LaTeX PDF
      run: python generate_pdf.py
      working-directory: software/documentation


    - name: Compress PDF with Ghostscript (balanced quality)
      run: |
        original_pdf=$(ls build/*.pdf | head -n1)
        repo_name=${{ github.event.repository.name }}
        output_name="${repo_name}_product_brief.pdf"
        gs -sDEVICE=pdfwrite -dCompatibilityLevel=1.4 -dPDFSETTINGS=/printer \
           -dNOPAUSE -dQUIET -dBATCH \
           -sOutputFile=build/compressed.pdf "$original_pdf"
        mv build/compressed.pdf "build/$output_name"
        echo "PDF final: $output_name"
      working-directory: software/documentation


    - name: List final PDF
      run: ls -lh software/documentation/build

    - name: Scan PDF for secrets
      run: |
        if grep -aEi 'AKIA|api[_-]?key|secret|token|Authorization|password' software/documentation/build/*.pdf; then
          echo " Potential secret detected in PDF"
          exit 1
        fi

    - name: Move PDF to root docs/ for GitHub Pages
      run: |
        mkdir -p docs
        cp software/documentation/build/${{ github.event.repository.name }}_product_brief.pdf docs/
        
        # Buscar y copiar archivos de esquem√°tico
        echo "üîÑ Buscando archivos de esquem√°tico..."
        schematic_files=$(find hardware/ -name "*sch*.pdf" -type f 2>/dev/null || true)
        if [ -n "$schematic_files" ]; then
          echo "‚úÖ Copiando archivos de esquem√°tico:"
          for file in $schematic_files; do
            filename=$(basename "$file")
            cp "$file" docs/
            echo "  - $filename"
          done
        else
          echo "‚ö†Ô∏è No se encontraron archivos de esquem√°tico"
        fi
        
        # Mostrar contenido final de docs/
        echo "üìÅ Contenido de docs/:"
        ls -la docs/
        
        # Actualizar timestamp en index.html si existe, o generarlo si no existe
        if [ -f "docs/index.html" ]; then
          echo "üîÑ Actualizando timestamp en index.html..."
          current_time=$(date -u +"%Y-%m-%d %H:%M:%S UTC")
          sed -i "s/Last generated: .*/Last generated: $current_time<\/span>/" docs/index.html
          echo "‚úÖ Timestamp actualizado: $current_time"
        else
          echo "‚ö†Ô∏è docs/index.html no encontrado, generando desde template..."
          cd software/documentation
          if [ -f "index_template.html" ]; then
            python generate_index.py
            echo "‚úÖ index.html generado desde template"
          else
            echo "‚ùå Template no encontrado, creando index.html b√°sico"
            mkdir -p ../../docs
            echo "<!DOCTYPE html><html><head><title>Documentation</title></head><body><h1>Documentation Portal</h1><p>Portal will be regenerated automatically.</p></body></html>" > ../../docs/index.html
          fi
          cd ../..
        fi


    - name: Commit and push PDF to docs/ (only on main)
      if: github.ref == 'refs/heads/main'
      run: |
        git config --global user.name "GitHub Actions"
        git config --global user.email "actions@github.com"
        git pull origin main
        git add docs/${{ github.event.repository.name }}_product_brief.pdf
        git add docs/*.pdf  # Incluir todos los PDFs (esquem√°ticos)
        git add docs/index.html  # Incluir index.html actualizado
        git commit -m "Publish compressed PDF, schematics and updated documentation portal [skip ci]" || echo "No changes to commit"
        git push origin main